<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VirtualBox+Vagrant快速搭建跨平台开发环境</title>
      <link href="/2020/04/21/vagrant-virtualbox/"/>
      <url>/2020/04/21/vagrant-virtualbox/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux系统对于我们后端工程师来说在我们的日常工作和学习中是必不可少的，但是我们很少将自己的操作系统直接装成Linux，而是选择在Windows上使用VMware或者VirtualBox工具搭建Linux虚拟机，但是搭建起来相对比较复杂，Vagrant作为一款管理虚拟开发环境的工具，只需要简单的配置就能够轻松的帮助我们管理虚拟机，如VirtualBox、VMware等，并且能够为我们提供一个可配置、可移植和复用的软件环境，因此Vagrant也需要依赖这些虚拟机工具，本文使用VirtualBox作为虚拟机工具。</p><h2 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h2><p>VirtualBox相对于VMware而言，显得小巧玲珑，而且VMware是收费的，对于我们来说，开源免费才是我们最喜爱的~</p><p>下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox下载地址</a></p><p>安装步骤极其简单，直接下一步</p><h2 id="安装Vagrant"><a href="#安装Vagrant" class="headerlink" title="安装Vagrant"></a>安装Vagrant</h2><p>下载地址：<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">Vagrant下载地址</a></p><p>安装步骤也比较简单，直接下一步即可</p><p>安装完成之后，在命令行输入“vagrant -v”查看Vagrant安装版本，测试安装是否成功<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_12-47-2-69c1667def714649bf051eefb9d04540_1587459915838.png" alt="image2020-3-1_12-47-2-69c1667def714649bf051eefb9d04540"></p><h2 id="下载Box镜像"><a href="#下载Box镜像" class="headerlink" title="下载Box镜像"></a>下载Box镜像</h2><p>Box是Vagrant的基础镜像，和docker的images比较像，Vagrant官方提供的镜像仓库中有各种版本的Box镜像，我们可以按需自行下载。</p><p>地址：<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">镜像下载地址</a></p><p>我们可以直接使用”vagrant box add xxx”下载一个镜像到本地，并且添加到vagrant 的box列表中，但是因为镜像地址时国外的，下载比较缓慢，建议先将box镜像下载到本地，再使用上述命令将本地box镜像加载到vagrant的box列表中，添加镜像之后，使用”vagrant box list”列出本地有哪些镜像。类似于docker 的“docker images”<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-7-29-de24378fada94859b1b7f7efb6f3e85d_1587459851348.png" alt="image2020-3-1_13-7-29-de24378fada94859b1b7f7efb6f3e85d"></p><h2 id="初始化开发环境"><a href="#初始化开发环境" class="headerlink" title="初始化开发环境"></a>初始化开发环境</h2><p>使用上一步添加的box镜像文件来初始化一个开发环境，在初始化之前，有一个小提示，VirtualBox默认将虚拟机文件放置在C盘，即系统盘，我们最好事先将这个路径改成其他盘防止占用系统资源，如下图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-13-46-a97c5ab6606f48d68f137decedacf121_1587459814461.png" alt="image2020-3-1_13-13-46-a97c5ab6606f48d68f137decedacf121"></p><p>然后创建一个存放这个开发环境的目录，进入目录之后，执行vagrant命令“vagrant init centos7”，init后面跟的是本地box列表中box的名字，如下图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-18-48-112d1904052d438eba6520acd4867d9f_1587459761734.png" alt="image2020-3-1_13-18-48-112d1904052d438eba6520acd4867d9f"></p><p>出现如图中提示说明初始化成功，它会在我们的开发目录中为我们自动生成一个Vagrantfile配置文件<br>Vagrantfile是类似于docker的Dockerfile一样的东西，我们可以修改里面的配置参数去初始化我们的虚拟机环境，自动生成的Vagrantfile文件内容如下所示</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># -*- mode: ruby -*-</span><span class="token comment" spellcheck="true"># vi: set ft=ruby :</span><span class="token comment" spellcheck="true"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span><span class="token comment" spellcheck="true"># configures the configuration version (we support older styles for</span><span class="token comment" spellcheck="true"># backwards compatibility). Please don't change it unless you know what</span><span class="token comment" spellcheck="true"># you're doing.</span><span class="token constant">Vagrant</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>  <span class="token comment" spellcheck="true"># The most common configuration options are documented and commented below.</span>  <span class="token comment" spellcheck="true"># For a complete reference, please see the online documentation at</span>  <span class="token comment" spellcheck="true"># https://docs.vagrantup.com.</span>  <span class="token comment" spellcheck="true"># Every Vagrant development environment requires a box. You can search for</span>  <span class="token comment" spellcheck="true"># boxes at https://vagrantcloud.com/search.</span>  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string">"centos7"</span>  <span class="token comment" spellcheck="true"># Disable automatic box update checking. If you disable this, then</span>  <span class="token comment" spellcheck="true"># boxes will only be checked for updates when the user runs</span>  <span class="token comment" spellcheck="true"># `vagrant box outdated`. This is not recommended.</span>  <span class="token comment" spellcheck="true"># config.vm.box_check_update = false</span>  <span class="token comment" spellcheck="true"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="token comment" spellcheck="true"># within the machine from a port on the host machine. In the example below,</span>  <span class="token comment" spellcheck="true"># accessing "localhost:8080" will access port 80 on the guest machine.</span>  <span class="token comment" spellcheck="true"># NOTE: This will enable public access to the opened port</span>  <span class="token comment" spellcheck="true"># config.vm.network "forwarded_port", guest: 80, host: 8080</span>  <span class="token comment" spellcheck="true"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="token comment" spellcheck="true"># within the machine from a port on the host machine and only allow access</span>  <span class="token comment" spellcheck="true"># via 127.0.0.1 to disable public access</span>  <span class="token comment" spellcheck="true"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span>  <span class="token comment" spellcheck="true"># Create a private network, which allows host-only access to the machine</span>  <span class="token comment" spellcheck="true"># using a specific IP.</span>  <span class="token comment" spellcheck="true"># config.vm.network "private_network", ip: "192.168.33.10"</span>  <span class="token comment" spellcheck="true"># Create a public network, which generally matched to bridged network.</span>  <span class="token comment" spellcheck="true"># Bridged networks make the machine appear as another physical device on</span>  <span class="token comment" spellcheck="true"># your network.</span>  <span class="token comment" spellcheck="true"># config.vm.network "public_network"</span>  <span class="token comment" spellcheck="true"># Share an additional folder to the guest VM. The first argument is</span>  <span class="token comment" spellcheck="true"># the path on the host to the actual folder. The second argument is</span>  <span class="token comment" spellcheck="true"># the path on the guest to mount the folder. And the optional third</span>  <span class="token comment" spellcheck="true"># argument is a set of non-required options.</span>  <span class="token comment" spellcheck="true"># config.vm.synced_folder "../data", "/vagrant_data"</span>  <span class="token comment" spellcheck="true"># Provider-specific configuration so you can fine-tune various</span>  <span class="token comment" spellcheck="true"># backing providers for Vagrant. These expose provider-specific options.</span>  <span class="token comment" spellcheck="true"># Example for VirtualBox:</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true"># config.vm.provider "virtualbox" do |vb|</span>  <span class="token comment" spellcheck="true">#   # Display the VirtualBox GUI when booting the machine</span>  <span class="token comment" spellcheck="true">#   vb.gui = true</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true">#   # Customize the amount of memory on the VM:</span>  <span class="token comment" spellcheck="true">#   vb.memory = "1024"</span>  <span class="token comment" spellcheck="true"># end</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true"># View the documentation for the provider you are using for more</span>  <span class="token comment" spellcheck="true"># information on available options.</span>  <span class="token comment" spellcheck="true"># Enable provisioning with a shell script. Additional provisioners such as</span>  <span class="token comment" spellcheck="true"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span>  <span class="token comment" spellcheck="true"># documentation for more information about their specific syntax and use.</span>  <span class="token comment" spellcheck="true"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span>  <span class="token comment" spellcheck="true">#   apt-get update</span>  <span class="token comment" spellcheck="true">#   apt-get install -y apache2</span>  <span class="token comment" spellcheck="true"># SHELL</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vagrantfile文件使用ruby语法，但是因为该配置文件说明及其详细，我们不用去了解ruby就能够轻松配置，下面对里面的几个重要配置信息进行说明：</p><ul><li>config.vm.box = “centos7”：指定初始化该虚拟机的box</li><li>config.vm.network “forwarded_port”：端口映射，将虚拟机中的端口映射到本地宿主机，这样外部就能访问本地宿主机的端口去访问虚拟机服务了</li><li>config.vm.network “private_network”：使用host-only的方式初始化虚拟机网络，并且为虚拟机分配一个静态ip，后续宿主机可以通过这个ip来访问虚拟机</li><li>…<h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2>配置完成之后，在我们的开发目录下，使用”vagrant up“启动虚拟机，如下图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-37-4-65104453a03646d0afcfc933d765efd3_1587459691031.png" alt="image2020-3-1_13-37-4-65104453a03646d0afcfc933d765efd3"></li></ul><p>此时，虚拟机已经启动起来了，我们可以使用”vagrant ssh”连接到虚拟机中去<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-39-33-433136a5ac7844129817756525861e7a_1587459521186.png" alt="image2020-3-1_13-39-33-433136a5ac7844129817756525861e7a"></p><p>此时我们就可以在Linux的海洋快乐的进行玩耍了~<br>需要注意的是，初始化的Linux环境默认是不支持用户名密码进行登陆的，需要修改/etc/ssh/sshd_config配置文件，修改步骤：</p><ol><li>sudo vim /etc/ssh/sshd_config</li><li>找到passwordAuthentication项，修改成yes</li><li>重启ssh服务：sudo service sshd restart</li><li>退出重新登陆即可，root的默认密码为vagrant<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2>像docker一样，vagrant支持将自己配置好的虚拟机重新打包成新的box镜像，这样就能将我们自己的开发环境打包出来共享给其他小伙伴使用，别人就可以有和自己完全相同的开发环境了，不必再纠结于在我电脑上能运行，在别人电脑上就跑不起来的各种各样奇葩的环境问题了。<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3>首先使用”vagrant halt”命令将虚拟机正常关闭，然后在我们的开发目录下使用”vagrant package“进行打包<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_16-6-51-e63ae86ca5f844b18ebf18247779e9d9_1587459313372.png" alt="image2020-3-1_16-6-51-e63ae86ca5f844b18ebf18247779e9d9"></li></ol><p>如图所示，在我们的开发目录中已经生成了一个package.box文件</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vagrant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> virtual </tag>
            
            <tag> vagrant </tag>
            
            <tag> virtual Box </tag>
            
            <tag> centOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/21/hello-world/"/>
      <url>/2020/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
