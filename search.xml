<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker下安装oracle-xe-11g</title>
      <link href="/2020/04/24/docker-install-ora11g/"/>
      <url>/2020/04/24/docker-install-ora11g/</url>
      
        <content type="html"><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre><code>docker pull docker.io/sath89/oracle-xe-11g</code></pre><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>使用docker run命令创建一个容器，-d表示在后台运行容器，并打印容器ID，-p表示映射一个宿主机的端口号，–name表示重命名容器，如果不指定容器名，docker会默认为容器起一个别名，-v表示创建一个数据卷，将宿主机的某个目录和容器挂载到一起</p><pre><code>docker run -d -p 1521:1521 --name oracle -v /u01/app/oracle/:/u01/app/oracle/ sath89/oracle-xe-11g</code></pre><h2 id="查看容器是否创建成功"><a href="#查看容器是否创建成功" class="headerlink" title="查看容器是否创建成功"></a>查看容器是否创建成功</h2><pre><code>docker ps</code></pre><h2 id="出现以下内容说明容器创建成功"><a href="#出现以下内容说明容器创建成功" class="headerlink" title="出现以下内容说明容器创建成功"></a>出现以下内容说明容器创建成功</h2><pre><code>[root@bogon ~]# docker psCONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                                            NAMES8e0d664a262a        sath89/oracle-xe-11g   "/entrypoint.sh "   7 weeks ago         Up 27 hours         0.0.0.0:1521-&gt;1521/tcp, 0.0.0.0:8080-&gt;8080/tcp   oracle[root@bogon ~]# </code></pre><h2 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h2><pre><code>docker exec -it oracle /bin/bash</code></pre><h2 id="在容器内部使用sqlplus连接oracle"><a href="#在容器内部使用sqlplus连接oracle" class="headerlink" title="在容器内部使用sqlplus连接oracle"></a>在容器内部使用sqlplus连接oracle</h2><pre><code>root@8e0d664a262a:/# sqlplusSQL*Plus: Release 11.2.0.2.0 Production on Sat Jul 20 09:30:42 2019Copyright (c) 1982, 2011, Oracle.  All rights reserved.Enter user-name: systemEnter password: Connected to:Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit ProductionSQL&gt; </code></pre><p>oracle默认的用户名密码为：system oracle</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7上安装Docker</title>
      <link href="/2020/04/24/docker-install/"/>
      <url>/2020/04/24/docker-install/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><pre><code>yum install docker</code></pre><h2 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h2><p>Docker 自带镜像源下载镜像缓慢，可以更换为国内Docker仓库地址</p><pre><code>vim /etc/docker/daemon.json</code></pre><p>在该文件中添加以下内容</p><pre><code>{  "registry-mirrors": [ "https://pee6w651.mirror.aliyuncs.com"]}</code></pre><p>如果觉得上面地址有问题，可以切换为网易的仓库</p><pre><code>http://hub-mirror.c.163.com</code></pre><h2 id="启动Docker服务"><a href="#启动Docker服务" class="headerlink" title="启动Docker服务"></a>启动Docker服务</h2><pre><code>systemctl start docker</code></pre><p>然后输入以下命令查看Docker版本</p><pre><code>docker -v</code></pre><p>如果出现以下命令查看Docker说明Docker安装成功</p><pre><code>[root@bogon u01]# docker -vDocker version 1.13.1, build b2f74b2/1.13.1[root@bogon u01]#</code></pre><p>然后就可以快乐的玩耍Docker了~~</p><h2 id="docker开机自启"><a href="#docker开机自启" class="headerlink" title="docker开机自启"></a>docker开机自启</h2><pre><code>systemctl enable docker.service</code></pre><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><pre><code>docker images  查看本地已下载的镜像列表docker ps 查看正在运行的容器列表docker ps -a 查看所有容器列表，包括正在运行和未运行的docker pull  [-a "o"&gt;] [user/ "o"&gt;]name[:tag "o"&gt;] 从 Docker Hub 中拉取或者更新指定镜像docker search 从 Docker Hub 中搜索符合条件的镜像docker start [container] 启动一个容器docker stop  [comtainer] 停止一个容器docker restart [container] 重启一个容器docker rm [container] 删除一个容器docker rmi [container] 删除一个镜像docker rm [container] -f 删除一个正在运行的容器docker run -p 8080:8080 -d --name [docker name] [imageID] 根据镜像创建一个容器 docker exec -it [container] /bin/bash 进入一个正在运行的容器中docker logs -f --tail 100 [container] 查看正在运行的docker最后100行日志...... </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle使用总结</title>
      <link href="/2020/04/24/oracle-use/"/>
      <url>/2020/04/24/oracle-use/</url>
      
        <content type="html"><![CDATA[<h2 id="递归查询部门"><a href="#递归查询部门" class="headerlink" title="递归查询部门"></a>递归查询部门</h2><pre class="line-numbers language-sql"><code class="language-sql">    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">start</span> <span class="token keyword">with</span> id<span class="token operator">=</span> ? <span class="token keyword">connect</span> <span class="token keyword">by</span> prior id <span class="token operator">=</span> parent_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询id的子部门（包 括id自身）</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">start</span> <span class="token keyword">with</span> id<span class="token operator">=</span> ? <span class="token keyword">connect</span> <span class="token keyword">by</span> prior parent_id<span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询id的父部门（包括id自身）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="copy表"><a href="#copy表" class="headerlink" title="copy表"></a>copy表</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tableName <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tableName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//copy表</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置百分点"><a href="#设置百分点" class="headerlink" title="设置百分点"></a>设置百分点</h2><pre class="line-numbers language-sql"><code class="language-sql">concat<span class="token punctuation">(</span>to_char<span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> l<span class="token punctuation">.</span>person_id<span class="token punctuation">)</span> <span class="token operator">/</span>                              <span class="token function">count</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>person_id<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span>                              <span class="token string">'990.99'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token string">'%'</span><span class="token punctuation">)</span> baifen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for循环执行SQL语句"><a href="#for循环执行SQL语句" class="headerlink" title="for循环执行SQL语句"></a>for循环执行SQL语句</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">declare</span>    <span class="token keyword">begin</span>    <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">100</span>    loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'sql语句'</span><span class="token operator">||</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="oracle查询已锁住的表"><a href="#oracle查询已锁住的表" class="headerlink" title="oracle查询已锁住的表"></a>oracle查询已锁住的表</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    OBJECT_NAME<span class="token punctuation">,</span>    SESSION_ID SID<span class="token punctuation">,</span>    MACHINE<span class="token punctuation">,</span>    VS<span class="token punctuation">.</span>MODULE<span class="token punctuation">,</span>    <span class="token string">'ALTER SYSTEM KILL SESSION '</span><span class="token string">''</span> <span class="token operator">||</span> SESSION_ID <span class="token operator">||</span> <span class="token string">', '</span> <span class="token operator">||</span> <span class="token keyword">SERIAL</span><span class="token comment" spellcheck="true">#|| '''; ' KILL_SESSION,</span>    VS<span class="token punctuation">.</span><span class="token keyword">STATUS</span><span class="token punctuation">,</span>    VS<span class="token punctuation">.</span><span class="token keyword">ACTION</span><span class="token punctuation">,</span>    <span class="token keyword">SERIAL</span><span class="token comment" spellcheck="true">#,</span>    ORACLE_USERNAME<span class="token punctuation">,</span>    OS_USER_NAME<span class="token keyword">FROM</span>    V$LOCKED_OBJECT VO<span class="token punctuation">,</span>    V$<span class="token keyword">SESSION</span> VS<span class="token punctuation">,</span>    ALL_OBJECTS AO<span class="token keyword">WHERE</span>    VO<span class="token punctuation">.</span>SESSION_ID <span class="token operator">=</span> VS<span class="token punctuation">.</span>SID    <span class="token operator">AND</span> AO<span class="token punctuation">.</span>OBJECT_ID <span class="token operator">=</span> VO<span class="token punctuation">.</span>OBJECT_ID    <span class="token operator">AND</span> NVL<span class="token punctuation">(</span>VS<span class="token punctuation">.</span><span class="token keyword">ACTION</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">&lt;></span> <span class="token string">'Service Management '</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    OBJECT_NAME<span class="token punctuation">,</span>    MACHINE<span class="token punctuation">,</span>    VS<span class="token punctuation">.</span>MODULE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中KILL_SESSION为对应解锁的SQL，需要具有权限才能执行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>itext使用总结</title>
      <link href="/2020/04/24/itext/"/>
      <url>/2020/04/24/itext/</url>
      
        <content type="html"><![CDATA[<h1 id="直接使用Document生成"><a href="#直接使用Document生成" class="headerlink" title="直接使用Document生成"></a>直接使用Document生成</h1><h2 id="创建Document对象"><a href="#创建Document对象" class="headerlink" title="创建Document对象"></a>创建Document对象</h2><pre class="line-numbers language-java"><code class="language-java">Document doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建document对象</span>PdfWriter instance <span class="token operator">=</span> PdfWriter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>FILE_DIR <span class="token operator">+</span> <span class="token string">"1.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定pdf名称及存储路径</span>doc<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打开document对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="插入段落"><a href="#插入段落" class="headerlink" title="插入段落"></a>插入段落</h2><pre class="line-numbers language-java"><code class="language-java">doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><pre class="line-numbers language-java"><code class="language-java">Image image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>LOGO_DIR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LOGO_DIR为图片路径</span>doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 图片加入文档中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><pre class="line-numbers language-java"><code class="language-java">PdfPTable baseInfoTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPTable</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个3列的表格 PdfPCell cell = new PdfPCell(“test”);// 创建一个单元格</span>PdfPCell cell1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span>“test”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个单元格</span>PdfPCell cell2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span>“test”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个单元格</span>baseInfoTable<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将单元格加入表格中</span>baseInfoTable<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>cell1<span class="token punctuation">)</span><span class="token punctuation">;</span>baseInfoTable<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>cell2<span class="token punctuation">)</span><span class="token punctuation">;</span>doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>baseInfoTable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将表格加入document中</span>doc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="通过html转为pdf"><a href="#通过html转为pdf" class="headerlink" title="通过html转为pdf"></a>通过html转为pdf</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先通过freemarker模板将数据渲染出来生成html静态页面</li><li>通过itext的html2pdf组件将html页面转换成pdf</li><li>通过itext包下的ColumnText.showTextAligned(final PdfContentByte canvas, final int alignment, final Phrase phrase, final float x, final float y, final float rotation)方法添加循环水印</li></ol><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>itextpdf<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>html2pdf<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>lowagie<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>itext<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>itextpdf<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>font<span class="token operator">-</span>asian<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">7.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PdfUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FreeMarkerConfigurer freeMarkerConfigurer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ConverterProperties converterProperties<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        converterProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConverterProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提供解析用的字体</span>        FontProvider fp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FontProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加标准字体库、无中文</span>        fp<span class="token punctuation">.</span><span class="token function">addStandardPdfFonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自定义字体路径、解决中文</span>            fp<span class="token punctuation">.</span><span class="token function">addDirectory</span><span class="token punctuation">(</span>ResourceUtils<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span>ResourceUtils<span class="token punctuation">.</span>CLASSPATH_URL_PREFIX <span class="token operator">+</span> <span class="token string">"static/fonts"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"加载字体库异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        converterProperties<span class="token punctuation">.</span><span class="token function">setFontProvider</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> PdfPCell <span class="token function">getBasicCell</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isTitle<span class="token punctuation">,</span>String text<span class="token punctuation">,</span>Integer colspan<span class="token punctuation">,</span>Integer rowspan<span class="token punctuation">,</span>Font font<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PdfPCell cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Phrase</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> font<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colspan <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cell<span class="token punctuation">.</span><span class="token function">setColspan</span><span class="token punctuation">(</span>colspan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rowspan <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cell<span class="token punctuation">.</span><span class="token function">setRowspan</span><span class="token punctuation">(</span>rowspan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 无边框</span>        cell<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>Rectangle<span class="token punctuation">.</span>NO_BORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cell<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>BaseColor<span class="token punctuation">.</span>LIGHT_GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cell<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>ALIGN_LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cell<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setTableCells</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>PdfPCell<span class="token operator">></span> cells<span class="token punctuation">,</span> PdfPTable table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PdfPCell cell<span class="token operator">:</span>cells<span class="token punctuation">)</span> <span class="token punctuation">{</span>            table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setTableCells</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isTitle<span class="token punctuation">,</span>PdfPTable table<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">,</span>Font font<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name<span class="token operator">:</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span>            table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">getBasicCell</span><span class="token punctuation">(</span>isTitle<span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>font<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置一个小标题     *     * @param name 标题名称     * @param document 文档对象     * @param font 字体     * @throws DocumentException DocumentException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Document document<span class="token punctuation">,</span>Font font<span class="token punctuation">)</span> <span class="token keyword">throws</span> DocumentException <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>font<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * 每页增加一条水印信息     *     * @param source     *            要加水印的原pdf文件字节数组     * @param textMark     *            水印文字     * @param textWidth     *            文字横坐标     * @param textHeight     *            文字纵坐标     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">addPdfTextMark</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span> String textMark<span class="token punctuation">,</span><span class="token keyword">int</span> textWidth<span class="token punctuation">,</span><span class="token keyword">int</span> textHeight<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        BaseFont font <span class="token operator">=</span> BaseFont<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span>ResourceUtils<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span>                ResourceUtils<span class="token punctuation">.</span>CLASSPATH_URL_PREFIX <span class="token operator">+</span> PDF_DIR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/simhei.ttf"</span><span class="token punctuation">,</span>                BaseFont<span class="token punctuation">.</span>IDENTITY_H<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PdfReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfReader</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PdfStamper stamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfStamper</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        PdfContentByte under<span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getNumberOfPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原pdf文件的总页数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pageSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            under <span class="token operator">=</span> stamp<span class="token punctuation">.</span><span class="token function">getUnderContent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 水印在之前文本下</span>            under<span class="token punctuation">.</span><span class="token function">beginText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            under<span class="token punctuation">.</span><span class="token function">setColorFill</span><span class="token punctuation">(</span>BaseColor<span class="token punctuation">.</span>LIGHT_GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文字水印 颜色</span>            under<span class="token punctuation">.</span><span class="token function">setFontAndSize</span><span class="token punctuation">(</span>font<span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文字水印 字体及字号</span>            under<span class="token punctuation">.</span><span class="token function">setTextMatrix</span><span class="token punctuation">(</span>textWidth<span class="token punctuation">,</span> textHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文字水印 起始位置</span>            under<span class="token punctuation">.</span><span class="token function">showTextAligned</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">,</span> textMark<span class="token punctuation">,</span> textWidth<span class="token punctuation">,</span> textHeight<span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            under<span class="token punctuation">.</span><span class="token function">endText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stamp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * freemarker渲染html     */</span>    <span class="token keyword">public</span> String <span class="token function">renderTrainDutyReport</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Writer out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取模板,并设置编码方式</span>            Template template <span class="token operator">=</span> freeMarkerConfigurer<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">"train_duty.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 合并数据模型与模板</span>            <span class="token comment" spellcheck="true">//将合并后的数据和模板写入到流中，这里使用的字符流</span>            template<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"加载freemarker模板失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"加载freemarker模板失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * html2pdf     *     * @param html html字符串     * @return byte[]     * @throws IOException IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">convert</span><span class="token punctuation">(</span>String html<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HtmlConverter<span class="token punctuation">.</span><span class="token function">convertToPdf</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> outputStream<span class="token punctuation">,</span> converterProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 循环增加水印     * @param source 源文件     * @param text 水印文字     * @return 加过水印的文件字节数组     * @throws Exception 异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">addWaterMark</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span> String text<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteArrayOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Font watermarkFont <span class="token operator">=</span> FontFactory                <span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span>ResourceUtils<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span>                        ResourceUtils<span class="token punctuation">.</span>CLASSPATH_URL_PREFIX <span class="token operator">+</span> <span class="token string">"static/fonts"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/simhei.ttf"</span><span class="token punctuation">,</span>                BaseFont<span class="token punctuation">.</span>IDENTITY_H<span class="token punctuation">,</span> BaseFont<span class="token punctuation">.</span>SUPERSCRIPT_SIZE<span class="token punctuation">,</span>                Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GrayColor</span><span class="token punctuation">(</span><span class="token number">0.9f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PdfReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfReader</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        PdfStamper stamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfStamper</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        PdfContentByte under<span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getNumberOfPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原pdf文件的总页数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pageSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            under <span class="token operator">=</span> stamp<span class="token punctuation">.</span><span class="token function">getUnderContent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 水印在之前文本下</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ColumnText<span class="token punctuation">.</span><span class="token function">showTextAligned</span><span class="token punctuation">(</span>under<span class="token punctuation">,</span> Element<span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Phrase</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>watermarkFont<span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token punctuation">(</span><span class="token number">50.5f</span> <span class="token operator">+</span> m <span class="token operator">*</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">40.0f</span> <span class="token operator">+</span> n <span class="token operator">*</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        stamp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> outputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO</span><span class="token comment" spellcheck="true">//        Path path = Paths.get("D:\\1111.pdf");</span><span class="token comment" spellcheck="true">//        Files.write(path, bytes);</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> itext </category>
          
      </categories>
      
      
        <tags>
            
            <tag> itext </tag>
            
            <tag> htmltopdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql使用总结</title>
      <link href="/2020/04/24/mysql/"/>
      <url>/2020/04/24/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="like查询对关键字的处理"><a href="#like查询对关键字的处理" class="headerlink" title="like查询对关键字的处理"></a>like查询对关键字的处理</h1><p>mysql在进行like模糊查询时如查询参数中有关键字如‘%’，‘_’，‘/’等，需要进行特殊处理，如不处理，搜索结果会不准确，比如如果模糊搜索参数为‘%’，其搜索出来的结果并不是含有‘%’号字符的数据，而是所有数据，可使用ESCAPE关键字，对特殊字符进行转义。<br>如下SQL，假如需要搜索表中字段name含有‘%’的数据，可以这样查询</p><pre class="line-numbers language-java"><code class="language-java">select <span class="token operator">*</span> from table a where a<span class="token punctuation">.</span>name like <span class="token string">'%/%%'</span> ESCAPE <span class="token string">'/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="对数值型字符串的比较"><a href="#对数值型字符串的比较" class="headerlink" title="对数值型字符串的比较"></a>对数值型字符串的比较</h1><p>假如数据库中的字段类型为varchar，但是实际存储的却是数字，现需要对该字段进行范围查询，如果直接对其进行比较是不行的，需要将比较对象两者其一转换为数字类型才可。最常用的方法是直接给参数+0让其转换为字符类型，如下所示</p><pre class="line-numbers language-java"><code class="language-java">select <span class="token operator">*</span> from table a where a<span class="token punctuation">.</span>value <span class="token operator">>=</span> <span class="token string">'100'</span><span class="token operator">+</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="组内排序"><a href="#组内排序" class="headerlink" title="组内排序"></a>组内排序</h1><p>假如需要按名称对一个表进行分组查询，并且需要查询出每个组中时间戳最大的那条记录，即组内排序,比如查询某条评论回复的列表等场景</p><h3 id="1-先排序，后去重"><a href="#1-先排序，后去重" class="headerlink" title="1. 先排序，后去重"></a>1. 先排序，后去重</h3><p>我们知道，去重时默认取的是每组重复的第一条数据，所以在去重之前按照时间戳进行倒序排列即可，如下</p><pre class="line-numbers language-java"><code class="language-java">select <span class="token function">distinct</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token function">from</span>     <span class="token punctuation">(</span>select <span class="token operator">*</span> from table order by last_update_time desc<span class="token punctuation">)</span> aorder by a<span class="token punctuation">.</span>last_update_time desc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>理论上这样是可以解决问题的，但是MySQL5.7+的版本这样查询是不行的，需要在子查询中加入limit，即</p><pre class="line-numbers language-java"><code class="language-java">select <span class="token function">distinct</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token function">from</span>     <span class="token punctuation">(</span>select <span class="token operator">*</span> from table order by last_update_time desc limit <span class="token number">10000000</span><span class="token punctuation">)</span> a order by a<span class="token punctuation">.</span>last_update_time desc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-使用NOT-EXISTS关键字"><a href="#2-使用NOT-EXISTS关键字" class="headerlink" title="2. 使用NOT EXISTS关键字"></a>2. 使用NOT EXISTS关键字</h3><pre class="line-numbers language-java"><code class="language-java">select <span class="token operator">*</span> from table a     where not <span class="token function">exists</span> <span class="token punctuation">(</span>select <span class="token number">1</span> from table b         where a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name         and a<span class="token punctuation">.</span>last_update_time <span class="token operator">></span> b<span class="token punctuation">.</span>last_update_time<span class="token punctuation">)</span> order by a<span class="token punctuation">.</span>last_update_time desc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能查询到每组最大的那条数据，但是如果时间戳重复的话会存在重复数据问题，因此需要加上distinct，这样既能达到分组去重的效果，又能获取到每个分组的最大的那条记录。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql进阶</title>
      <link href="/2020/04/24/mysql-plus/"/>
      <url>/2020/04/24/mysql-plus/</url>
      
        <content type="html"><![CDATA[<h2 id="一条SQL的执行过程"><a href="#一条SQL的执行过程" class="headerlink" title="一条SQL的执行过程"></a>一条SQL的执行过程</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://yxb.cool/upload/2020/2/16cf826eef99f6824c9f69d9704979d-5d9892fe81484f96abe1a21b5be55a02.png" alt="16cf826eef99f6824c9f69d9704979d.png"><br>其中引擎有各种不同的选择，比如innodb、memory、myisam等，不同的引擎的存储方式、索引实现方式有所不同，其中innodb最常用</p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><ul><li>未提交读<br>一个事务可以读取到其他事务修改的但是未提交的数据，会造成脏读、幻读、不可重复读</li><li>已提交读<br>一个事务可以只能读取到其他事务修改的且已提交的数据，会造成幻读、不可重复读，为oracle、sqlserver默认隔离界级别</li><li>可重复读<br>一个事务开启后所读取的数据不会改变，避免不可重复读的问题，但是还是会有幻读问题，为mysql默认隔离级别</li><li>串行化<br>事务串行顺序执行，避免所有异常情况，但是效率最低</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="mysql中的索引方法"><a href="#mysql中的索引方法" class="headerlink" title="mysql中的索引方法"></a>mysql中的索引方法</h3><ul><li>full-text<br>full-text在mysql里仅有myisam引擎支持它，而且支持full-text的字段只有char、varchar、text数据类型。<br>full-text主要是用来代替like “%***%”效率低下的问题</li><li>b-tree<br>b-tree在myisam里的形式和innodb稍有不同<br>在 innodb里，有两种形态：一是primary key形态，其leaf node里存放的是数据，而且不仅存放了索引键的数据，还存放了其他字段的数据。二是secondary index，其leaf node和普通的b-tree差不多，只是还存放了指向主键的信息.<br>而在myisam里，主键和其他的并没有太大区别。不过和innodb不太一样的地方是在myisam里，leaf node里存放的不是主键的信息，而是指向数据文件里的对应数据行的信息.</li><li>hash<br>hash索引由于其结构，所以在每次查询的时候直接一次到位，不像b-tree那样一点点的前进。所以hash索引的效率高于b-tree，但hash也有缺点，主要如下：<br>(1)由于存放的是hash值，所以仅支持&lt;=&gt;以及in操作.<br>(2)hash索引无法通过操作索引来排序，这是因为存放的时候经过hash计算，但是计算的hash值和存放的不一定相等，所以无法排序.<br>(3)在组合所以里，无法对部分使用索引.<br>(4)当存在大量相同hash值得时候，hash索引的效率会变低（碰撞）.</li></ul><h3 id="联合索引的最左匹配原则"><a href="#联合索引的最左匹配原则" class="headerlink" title="联合索引的最左匹配原则"></a>联合索引的最左匹配原则</h3><ol><li>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</li></ol><p>理解：我们都知道索引都是有序排列的数据结构，这是对于单一索引而言的，对于联合索引来说，联合索引中的某一个索引（非第一个）并不一定是有序的，以(name,id)为例</p><table><thead><tr><th align="left">name</th><th align="left">id</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">8</td></tr><tr><td align="left">b</td><td align="left">4</td></tr><tr><td align="left">b</td><td align="left">5</td></tr><tr><td align="left">c</td><td align="left">2</td></tr></tbody></table><p>由上表可知，联合索引(name,id)是先针对name进行排序，再针对id进行排序，相当于sql中的“order by name,id”，因此要想保证id有序可以用到索引，需要name等值匹配（最左匹配），因此如果建立(a,b,c,d)顺序的索引，像“a = 1 and b = 2 and c &gt; 3 and d = 4 ”这样查询d用不到索引，因为由于c&gt;3不是等值匹配，导致d不是有序的。</p><ol start="2"><li>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的<strong>查询优化器</strong>会帮你优化成索引可以识别的形式。</li><li>尽量选择区分度高的列作为索引，区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录。</li><li>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)。</li></ol><p>5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox+Vagrant快速搭建跨平台开发环境</title>
      <link href="/2020/04/21/vagrant-virtualbox/"/>
      <url>/2020/04/21/vagrant-virtualbox/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux系统对于我们后端工程师来说在我们的日常工作和学习中是必不可少的，但是我们很少将自己的操作系统直接装成Linux，而是选择在Windows上使用VMware或者VirtualBox工具搭建Linux虚拟机，但是搭建起来相对比较复杂，Vagrant作为一款管理虚拟开发环境的工具，只需要简单的配置就能够轻松的帮助我们管理虚拟机，如VirtualBox、VMware等，并且能够为我们提供一个可配置、可移植和复用的软件环境，因此Vagrant也需要依赖这些虚拟机工具，本文使用VirtualBox作为虚拟机工具。</p><h2 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h2><p>VirtualBox相对于VMware而言，显得小巧玲珑，而且VMware是收费的，对于我们来说，开源免费才是我们最喜爱的~</p><p>下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox下载地址</a></p><p>安装步骤极其简单，直接下一步</p><h2 id="安装Vagrant"><a href="#安装Vagrant" class="headerlink" title="安装Vagrant"></a>安装Vagrant</h2><p>下载地址：<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">Vagrant下载地址</a></p><p>安装步骤也比较简单，直接下一步即可</p><p>安装完成之后，在命令行输入“vagrant -v”查看Vagrant安装版本，测试安装是否成功<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_12-47-2-69c1667def714649bf051eefb9d04540_1587459915838.png" alt="image2020-3-1_12-47-2-69c1667def714649bf051eefb9d04540"></p><h2 id="下载Box镜像"><a href="#下载Box镜像" class="headerlink" title="下载Box镜像"></a>下载Box镜像</h2><p>Box是Vagrant的基础镜像，和docker的images比较像，Vagrant官方提供的镜像仓库中有各种版本的Box镜像，我们可以按需自行下载。</p><p>地址：<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">镜像下载地址</a></p><p>我们可以直接使用”vagrant box add xxx”下载一个镜像到本地，并且添加到vagrant 的box列表中，但是因为镜像地址时国外的，下载比较缓慢，建议先将box镜像下载到本地，再使用上述命令将本地box镜像加载到vagrant的box列表中，添加镜像之后，使用”vagrant box list”列出本地有哪些镜像。类似于docker 的“docker images”<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-7-29-de24378fada94859b1b7f7efb6f3e85d_1587459851348.png" alt="image2020-3-1_13-7-29-de24378fada94859b1b7f7efb6f3e85d"></p><h2 id="初始化开发环境"><a href="#初始化开发环境" class="headerlink" title="初始化开发环境"></a>初始化开发环境</h2><p>使用上一步添加的box镜像文件来初始化一个开发环境，在初始化之前，有一个小提示，VirtualBox默认将虚拟机文件放置在C盘，即系统盘，我们最好事先将这个路径改成其他盘防止占用系统资源，如下图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-13-46-a97c5ab6606f48d68f137decedacf121_1587459814461.png" alt="image2020-3-1_13-13-46-a97c5ab6606f48d68f137decedacf121"></p><p>然后创建一个存放这个开发环境的目录，进入目录之后，执行vagrant命令“vagrant init centos7”，init后面跟的是本地box列表中box的名字，如下图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-18-48-112d1904052d438eba6520acd4867d9f_1587459761734.png" alt="image2020-3-1_13-18-48-112d1904052d438eba6520acd4867d9f"></p><p>出现如图中提示说明初始化成功，它会在我们的开发目录中为我们自动生成一个Vagrantfile配置文件<br>Vagrantfile是类似于docker的Dockerfile一样的东西，我们可以修改里面的配置参数去初始化我们的虚拟机环境，自动生成的Vagrantfile文件内容如下所示</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># -*- mode: ruby -*-</span><span class="token comment" spellcheck="true"># vi: set ft=ruby :</span><span class="token comment" spellcheck="true"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span><span class="token comment" spellcheck="true"># configures the configuration version (we support older styles for</span><span class="token comment" spellcheck="true"># backwards compatibility). Please don't change it unless you know what</span><span class="token comment" spellcheck="true"># you're doing.</span><span class="token constant">Vagrant</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>  <span class="token comment" spellcheck="true"># The most common configuration options are documented and commented below.</span>  <span class="token comment" spellcheck="true"># For a complete reference, please see the online documentation at</span>  <span class="token comment" spellcheck="true"># https://docs.vagrantup.com.</span>  <span class="token comment" spellcheck="true"># Every Vagrant development environment requires a box. You can search for</span>  <span class="token comment" spellcheck="true"># boxes at https://vagrantcloud.com/search.</span>  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string">"centos7"</span>  <span class="token comment" spellcheck="true"># Disable automatic box update checking. If you disable this, then</span>  <span class="token comment" spellcheck="true"># boxes will only be checked for updates when the user runs</span>  <span class="token comment" spellcheck="true"># `vagrant box outdated`. This is not recommended.</span>  <span class="token comment" spellcheck="true"># config.vm.box_check_update = false</span>  <span class="token comment" spellcheck="true"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="token comment" spellcheck="true"># within the machine from a port on the host machine. In the example below,</span>  <span class="token comment" spellcheck="true"># accessing "localhost:8080" will access port 80 on the guest machine.</span>  <span class="token comment" spellcheck="true"># NOTE: This will enable public access to the opened port</span>  <span class="token comment" spellcheck="true"># config.vm.network "forwarded_port", guest: 80, host: 8080</span>  <span class="token comment" spellcheck="true"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="token comment" spellcheck="true"># within the machine from a port on the host machine and only allow access</span>  <span class="token comment" spellcheck="true"># via 127.0.0.1 to disable public access</span>  <span class="token comment" spellcheck="true"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span>  <span class="token comment" spellcheck="true"># Create a private network, which allows host-only access to the machine</span>  <span class="token comment" spellcheck="true"># using a specific IP.</span>  <span class="token comment" spellcheck="true"># config.vm.network "private_network", ip: "192.168.33.10"</span>  <span class="token comment" spellcheck="true"># Create a public network, which generally matched to bridged network.</span>  <span class="token comment" spellcheck="true"># Bridged networks make the machine appear as another physical device on</span>  <span class="token comment" spellcheck="true"># your network.</span>  <span class="token comment" spellcheck="true"># config.vm.network "public_network"</span>  <span class="token comment" spellcheck="true"># Share an additional folder to the guest VM. The first argument is</span>  <span class="token comment" spellcheck="true"># the path on the host to the actual folder. The second argument is</span>  <span class="token comment" spellcheck="true"># the path on the guest to mount the folder. And the optional third</span>  <span class="token comment" spellcheck="true"># argument is a set of non-required options.</span>  <span class="token comment" spellcheck="true"># config.vm.synced_folder "../data", "/vagrant_data"</span>  <span class="token comment" spellcheck="true"># Provider-specific configuration so you can fine-tune various</span>  <span class="token comment" spellcheck="true"># backing providers for Vagrant. These expose provider-specific options.</span>  <span class="token comment" spellcheck="true"># Example for VirtualBox:</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true"># config.vm.provider "virtualbox" do |vb|</span>  <span class="token comment" spellcheck="true">#   # Display the VirtualBox GUI when booting the machine</span>  <span class="token comment" spellcheck="true">#   vb.gui = true</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true">#   # Customize the amount of memory on the VM:</span>  <span class="token comment" spellcheck="true">#   vb.memory = "1024"</span>  <span class="token comment" spellcheck="true"># end</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true"># View the documentation for the provider you are using for more</span>  <span class="token comment" spellcheck="true"># information on available options.</span>  <span class="token comment" spellcheck="true"># Enable provisioning with a shell script. Additional provisioners such as</span>  <span class="token comment" spellcheck="true"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span>  <span class="token comment" spellcheck="true"># documentation for more information about their specific syntax and use.</span>  <span class="token comment" spellcheck="true"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span>  <span class="token comment" spellcheck="true">#   apt-get update</span>  <span class="token comment" spellcheck="true">#   apt-get install -y apache2</span>  <span class="token comment" spellcheck="true"># SHELL</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vagrantfile文件使用ruby语法，但是因为该配置文件说明及其详细，我们不用去了解ruby就能够轻松配置，下面对里面的几个重要配置信息进行说明：</p><ul><li>config.vm.box = “centos7”：指定初始化该虚拟机的box</li><li>config.vm.network “forwarded_port”：端口映射，将虚拟机中的端口映射到本地宿主机，这样外部就能访问本地宿主机的端口去访问虚拟机服务了</li><li>config.vm.network “private_network”：使用host-only的方式初始化虚拟机网络，并且为虚拟机分配一个静态ip，后续宿主机可以通过这个ip来访问虚拟机</li><li>…<h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2>配置完成之后，在我们的开发目录下，使用”vagrant up“启动虚拟机，如下图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-37-4-65104453a03646d0afcfc933d765efd3_1587459691031.png" alt="image2020-3-1_13-37-4-65104453a03646d0afcfc933d765efd3"></li></ul><p>此时，虚拟机已经启动起来了，我们可以使用”vagrant ssh”连接到虚拟机中去<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_13-39-33-433136a5ac7844129817756525861e7a_1587459521186.png" alt="image2020-3-1_13-39-33-433136a5ac7844129817756525861e7a"></p><p>此时我们就可以在Linux的海洋快乐的进行玩耍了~<br>需要注意的是，初始化的Linux环境默认是不支持用户名密码进行登陆的，需要修改/etc/ssh/sshd_config配置文件，修改步骤：</p><ol><li>sudo vim /etc/ssh/sshd_config</li><li>找到passwordAuthentication项，修改成yes</li><li>重启ssh服务：sudo service sshd restart</li><li>退出重新登陆即可，root的默认密码为vagrant<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2>像docker一样，vagrant支持将自己配置好的虚拟机重新打包成新的box镜像，这样就能将我们自己的开发环境打包出来共享给其他小伙伴使用，别人就可以有和自己完全相同的开发环境了，不必再纠结于在我电脑上能运行，在别人电脑上就跑不起来的各种各样奇葩的环境问题了。<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3>首先使用”vagrant halt”命令将虚拟机正常关闭，然后在我们的开发目录下使用”vagrant package“进行打包<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://file.yxb.cool/image2020-3-1_16-6-51-e63ae86ca5f844b18ebf18247779e9d9_1587459313372.png" alt="image2020-3-1_16-6-51-e63ae86ca5f844b18ebf18247779e9d9"></li></ol><p>如图所示，在我们的开发目录中已经生成了一个package.box文件</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vagrant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> virtual </tag>
            
            <tag> vagrant </tag>
            
            <tag> virtual Box </tag>
            
            <tag> centOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/21/hello-world/"/>
      <url>/2020/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
